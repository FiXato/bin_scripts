#!/usr/bin/env ruby
#encoding: utf-8
# Get train delays for given route between any NSB trainstation in Norway.
# Usage: `tog <predefined_route|departure_station arrival_station>`
# Example: `tog Rognan Bodø`

require 'nokogiri'
require 'open-uri'
require 'uri'

@indent_level = 0

def inc_indent_level
  @indent_level += 1
end

def dec_indent_level
  @indent_level -= 1 if @indent_level > 0
end

def indent
  '  ' * @indent_level
end

URLS = {

  :rognan_bodoe => "http://www.nsb.no/toget_i_rute/?ontime-from=Rognan&ontime-to=BOD%C3%98&ontime-submit_form=Vis+sanntidsinformasjon",
#  :rognan_bodoe => "http://m.nsb.no/?departure_station=rognan&arrival_station=BOD%C3%98&submit_train_on_schedule=&name=nsb&i=9694",
#  :bodoe_rognan => "http://m.nsb.no/?departure_station=BOD%C3%98&arrival_station=rognan&submit_train_on_schedule=&name=nsb&i=9694",
  :bodoe_rognan => "http://www.nsb.no/toget_i_rute/?ontime-from=BOD%C3%98&ontime-to=Rognan&ontime-submit_form=Vis+sanntidsinformasjon",
}

if ARGV.size == 1
  route = ARGV[0].to_sym
  unless URLS.keys.include?(route)
    route = :rognan_bodoe
    puts "Route #{route} unknown; defaulting to #{route}"
  end
  url = URLS[route]
elsif ARGV.size >= 2
  departure = URI::encode(ARGV[0])
  arrival = URI::encode(ARGV[1])
  page = ARGV[2].to_i
  time_from = Time.now + (172800 * page)
  time_to = time_from + 172800
#  url = "http://m.nsb.no/?departure_station=%s&arrival_station=%s&submit_train_on_schedule=1&name=nsb&i=9694&d=%i" % [departure, arrival, page]
  url = "http://www.nsb.no/toget_i_rute/?ontime-from=%s&ontime-to=%s&ontime-submit_form=Vis+sanntidsinformasjon" % [departure, arrival]
  if page > 0
    url += "&queryId=%ito%i&direction=next" % [time_from, time_to]
  end
else
  abort("Either supply a single route parameter (one of #{URLS.keys.join(", ")}) or just supply the departure and arrival stations.")
end

puts url
doc = Nokogiri::HTML(req = open(url, "Referer" => url))
if page.to_i > 0
  doc = Nokogiri::HTML(open(url, "Referer" => url, "Cookie" => req.meta['set-cookie'].split('; ',2)[0]))
end

#FIXME: find which are the proper error elements in the new website layout
errors = doc.css('.errors_routes .error_routes')
if errors.size > 0
  errors.each do |error|
    puts 'Error: %s' % error.text
  end
  abort("We encountered an error while requesting the route")
end

route = doc.at_css('#timetable-status h2').text
puts "Train route and delay info for #{route}"
schedules = []
doc.css('#timetable-status tr').each do |timetable_row|
  schedule = ''
  if day_change = timetable_row.at_xpath('.//th[@colspan=2]')
    dec_indent_level
    schedules << "\037For #{day_change.text.to_s.strip}:\037"
    inc_indent_level
  end
  css_classes = timetable_row['class'].split rescue []
  next unless (css_classes.include?('option') || css_classes.include?('section'))
  travel_option = timetable_row
  departure = travel_option.at_css('.depart')
  departure_time_old = departure.at_css('strong del') rescue nil
  departure_time_new = departure.at_css('strong ins') rescue nil
  [departure_time_old, departure_time_new].each{|el|el.remove rescue nil}
  departure_time_fallback = departure.at_css('strong') rescue nil
  departure_time_fallback.remove rescue nil
  departure_time = departure_time_new || departure_time_fallback

  arrival = travel_option.at_css('.arrive')
  arrival_time_old = arrival.at_css('strong del') rescue nil
  arrival_time_new = arrival.at_css('strong ins') rescue nil
  [arrival_time_old, arrival_time_new].each{|el|el.remove rescue nil}
  arrival_time_fallback = arrival.at_css('strong') rescue nil
  arrival_time_fallback.remove rescue nil
  arrival_time = arrival_time_new || arrival_time_fallback

  train = travel_option.at_css('.train')
  track = train.at_css('.platform')
  track.remove unless track.nil?
  track_number = track['title'].gsub("Toget går fra spor ",'') rescue nil
  status_message = travel_option.at_css('.status').text.to_s.strip.gsub(/[\s]/, ' ').gsub(/[\s]+/,' ') rescue ''

  if timetable_row['class'].split.include?('transfer')
    schedule += indent
    dec_indent_level
    trajectory_details = travel_option.next_sibling
    # Trajectory Departure Time(s)
    schedule += '[' + 2.chr + ('%s' % departure_time.text.to_s.strip) + 2.chr
    schedule += ' (was %s)' % departure_time_old.text.to_s.strip if departure_time_old
    schedule += ' -> '

    # Trajectory Arrival Time(s)
    schedule += 2.chr + ('%s' % arrival_time.text.to_s.strip) + 2.chr
    schedule += ' (was %s)' % arrival_time_old.text.to_s.strip if arrival_time_old
    schedule += " - Trajectory Details: #{trajectory_details.text.to_s.strip}]"
    inc_indent_level

    schedules << schedule
  else
    inc_indent_level
    # Oslo S, Spor 14 16:06 (was 16:02)  -> Trondheim S 22:44 Oslo S–Trondheim S Toget går fra spor 16
    # Train:
    schedule += indent
    schedule += 2.chr + "[#{train.text.to_s.strip} Toget] " + 2.chr

    # Departure station + track
    schedule += departure.text.strip if departure
    schedule += ', Spor %i' % track_number unless track_number.to_i == 0

    # Departure Time(s)
    schedule += ' @ '
    schedule += 2.chr + ('%s' % departure_time.text.to_s.strip) + 2.chr
    schedule += ' (was %s) ' % departure_time_old.text.to_s.strip if departure_time_old

    schedule += ' -> '

    # Arrival station
    schedule += arrival.text.strip if arrival

    # Arrival Time(s)
    schedule += ' @ '
    schedule += 2.chr + ('%s' % arrival_time.text.to_s.strip) + 2.chr
    schedule += ' (was %s)' % arrival_time_old.text.to_s.strip if arrival_time_old

    # Train's status
    if status_message.to_s != '' && status_message.to_s != '-' 
      inc_indent_level
      schedule += "\n"
      schedule += indent
      schedule += 2.chr + '[Status]: ' + 2.chr
      schedule += 22.chr + status_message + 22.chr + "\n"
      dec_indent_level
    end
    dec_indent_level
    
    schedules << schedule
  end
end

# delay_strings = []
# delays = doc.css('.travel_delay')
# delays.each do |delay|
#   overview = delay.css('.overview').text.gsub(/\s/,' ').squeeze(' ')
#   details = delay.css('.details').text.gsub(/\s/,' ').squeeze(' ')
#   delay_strings << '$s (%s)' % [details, overview]
#   puts "\002%s\002 (%s)" % [details, overview]
# end
cmd = "urlserver add \"#{url}\" \"TOG #{ARGV.join(' ')} RESULTS:\n #{schedules.join("\n")}\""
`#{cmd}` 
puts schedules.join("\n")
